# https://www.askpython.com/python-modules/numpy/numpy-vectorization
import numpy as np

def foo(a, b):
    """
    If a > b return a + b,
    else return a - b.
    """
    if a >= b:
       return a + b
    else:
       return a - b

# Create a vectorized version of foo
vecfoo = np.vectorize(foo)
print(vecfoo(np.arange(5), 5))

a = np.array([1, 2, 3, 4])
b = 2

vecfoo =  np.vectorize(foo)
res = vecfoo(a, b)
print(type(res[0]))

# –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –ù–∞—É—á–∏–º—Å—è –ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä—ã, –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
# –°—Ä–µ–¥—Å—Ç–≤–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ NumPy –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
# –Ω–∞–¥ –≤–µ–∫—Ç–æ—Ä–∞–º–∏. –ü—Ä–∏–º–µ–Ω–∏–≤ —Ñ—É–Ω–∫—Ü–∏—é np.array, –ø–æ—Å–ª–µ —É–º–Ω–æ–∂–µ–Ω–∏—è –∏
# –¥–µ–ª–µ–Ω–∏—è –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—É—á–∏–º –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
# —Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞:

import numpy as np

array1 = np.array([2, -4, 6, -8])
array2 = np.array([1, 2, 3, 4])
array_mult = array1 * array2
array_div = array1 / array2
print("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤: ", array_mult)
print("–ß–∞—Å—Ç–Ω–æ–µ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤: ", array_div)

# –ï—Å–ª–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –Ω–∞–¥ –º–∞—Å—Å–∏–≤–æ–º –∏
# –æ—Ç–¥–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º, —Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
# –º–∞—Å—Å–∏–≤–∞. –ò —Å–Ω–æ–≤–∞ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ —Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞.
# –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ–∏–∑–≤–µ–¥—ë–º –Ω–∞–¥ –º–∞—Å—Å–∏–≤–æ–º –∏ —á–∏—Å–ª–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
# —Å–ª–æ–∂–µ–Ω–∏—è, –≤—ã—á–∏—Ç–∞–Ω–∏—è –∏ –¥–µ–ª–µ–Ω–∏—è:
import numpy as np

array2 = np.array([1, 2, 3, 4])
array2_plus_10 = array2 + 10
array2_minus_10 = array2 - 10
array2_div_10 = array2 / 10
print("–°—É–º–º–∞: ", array2_plus_10)
print("–†–∞–∑–Ω–æ—Å—Ç—å: ", array2_minus_10)
print("–ß–∞—Å—Ç–Ω–æ–µ –º–∞—Å—Å–∏–≤–∞ –∏ —á–∏—Å–ª–∞: ", array2_div_10)

# –ö –º–∞—Å—Å–∏–≤—É —Ç–∞–∫–∂–µ –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–º—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
# –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å
# –∏–ª–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º—ã.
# –í–æ–∑–≤–µ–¥—ë–º –º–∞—Å—Å–∏–≤ –≤–æ –≤—Ç–æ—Ä—É—é —Å—Ç–µ–ø–µ–Ω—å:
import numpy as np

numbers_from_0 =  np.array([0, 1, 2, 3, 4])
squares = numbers_from_0**2
print(squares)

# –í—Å—ë —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏ —Ü–∏–∫–ª–∞–º–∏ –Ω–∞–¥ —Å–ø–∏—Å–∫–∞–º–∏. –ù–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏
# –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ NumPy —Ä–∞–±–æ—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ.
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä. –°—Ä–µ–¥–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ values –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
# –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª–∞ MAX –∏ MIN –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏,
# —á—Ç–æ MAX>MIN. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å.
# –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ùë• –Ω–∞—à–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∏—Å–ª–æ –≤
# –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 0 (MIN) –¥–æ 1 (MAX). –§–æ—Ä–º—É–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏ min_max_scale
# (–∞–Ω–≥–ª. ¬´–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –º–∏–Ω–∏–º—É–º–∞-–º–∞–∫—Å–∏–º—É–º–∞¬ª)

import numpy as np
def min_max_scale(values):
    return (values - min(values)) / (max(values) - min(values))

our_values = np.array([-20, 0, 0.5, 80, -1])
print(min_max_scale(our_values))

# –ò–Ω–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Å–∫–æ–ª—å —É–≥–æ–¥–Ω–æ –±–æ–ª—å—à–∏–º–∏.
# –ò—Ö –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ø–∞–ª–∏ –≤
# –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 0 –¥–æ 1. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é,
# –∏–ª–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:

# –≥–¥–µ exp() ‚Äî —ç—Ç–æ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ (–æ—Ç –ª–∞—Ç. exponere, ¬´–≤—ã—Å—Ç–∞–≤–ª—è—Ç—å¬ª).
# –û–Ω–∞ –≤–æ–∑–≤–æ–¥–∏—Ç e ‚Äî —á–∏—Å–ª–æ –≠–π–ª–µ—Ä–∞ (–∞–Ω–≥–ª. Euler number) ‚Äî –≤ —Å—Ç–µ–ø–µ–Ω—å
# –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ß–∏—Å–ª–æ –Ω–∞–∑–≤–∞–Ω–æ –≤ —á–µ—Å—Ç—å —à–≤–µ–π—Ü–∞—Ä—Å–∫–æ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
# –õ–µ–æ–Ω–∞—Ä–¥–∞ –≠–π–ª–µ—Ä–∞, –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–≤–Ω–æ 2.718281828.

##### TASK #####
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é logistic_transform(), –≤—ã–ø–æ–ª–Ω—è—é—â—É—é –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ
# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –µ—ë –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞.
import numpy as np

def logistic_transform(values):
    return 1 / (1+ np.exp(-values))

our_values = np.array([-20, 0, 0.5, 80, -1])
print(logistic_transform(our_values))

