# Евклидово расстояние:

import numpy as np
from scipy.spatial import distance

a = np.array([4, 2, 3, 0, 5])
b = np.array([1, 0, 3, 2, 6])
d = distance.euclidean(a, b)
print(d)

# Манхэттенское расстояние:
import numpy as np
from scipy.spatial import distance

a = np.array([4, 2, 3, 0, 5])
b = np.array([1, 0, 3, 2, 6])
d = distance.cityblock(a, b)
print(d)

# Рассмотрим пример. На сайте агентства недвижимости «Хоромы.рф»
# у каждого объекта свои параметры. Если клиенту нравится квартира,
# рекомендательная система предлагает ему другие похожие варианты.
# Данные о квартирах содержатся в таблице Pandas:

import pandas as pd

columns = ['комнаты', 'пл. общая', 'кухня', 'пл. жилая', 'этаж', 'всего этажей']
realty = [
    [1, 38.5, 6.9, 18.9, 3, 5],
    [1, 38.0, 8.5, 19.2, 9, 17],
    [1, 34.7, 10.3, 19.8, 1, 9],
    [1, 45.9, 11.1, 17.5, 11, 23],
    [1, 42.4, 10.0, 19.9, 6, 14],
    [1, 46.0, 10.2, 20.5, 3, 12],
    [2, 77.7, 13.2, 39.3, 3, 17],
    [2, 69.8, 11.1, 31.4, 12, 23],
    [2, 78.2, 19.4, 33.2, 4, 9],
    [2, 55.5, 7.8, 29.6, 1, 25],
    [2, 74.3, 16.0, 34.2, 14, 17],
    [2, 78.3, 12.3, 42.6, 23, 23],
    [2, 74.0, 18.1, 49.0, 8, 9],
    [2, 91.4, 20.1, 60.4, 2, 10],
    [3, 85.0, 17.8, 56.1, 14, 14],
    [3, 79.8, 9.8, 44.8, 9, 10],
    [3, 72.0, 10.2, 37.3, 7, 9],
    [3, 95.3, 11.0, 51.5, 15, 23],
    [3, 69.3, 8.5, 39.3, 4, 9],
    [3, 89.8, 11.2, 58.2, 24, 25],
]

df_realty = pd.DataFrame(realty, columns=columns)
print(df_realty)

# Каждый объект — это вектор, или набор параметров. Чтобы найти
# схожие квартиры, нужно рассчитать евклидово и манхэттенское
# расстояния.

# 1. Сохраните векторы квартир с индексами 3 и 11 в переменных
# vector_first («первый вектор») и vector_second («второй вектор»).
# Вычислите между ними евклидово и манхэттенское расстояния.
# Напечатайте их значения на экране (уже в прекоде).
vector_first = df_realty.loc[3].values
vector_second = df_realty.loc[11].values

# Euclidian distance
d = distance.euclidean(vector_first, vector_second)
print(d)

# Manhattan distance
d_manh = distance.cityblock(vector_first, vector_second)
print(d_manh)

print("Евклидово расстояние:", distance.euclidean(vector_first, vector_second))
print("Манхэттенское расстояние:", distance.cityblock(vector_second, vector_first))

# 2. Клиенту понравилась квартира с индексом 12. Найдите к ней ближайшую по евклидовому расстоянию.
# Создайте список с расстояниями всех векторов до вектора с номером 12. Вычислите индекс наиболее
# похожего объекта и сохраните в переменной best_index.
# англ. индекс понравившегося объекта
import numpy as np
import pandas as pd
from scipy.spatial import distance

columns = ['комнаты', 'пл. общая', 'кухня', 'пл. жилая', 'этаж', 'всего этажей']
realty = [
    [1, 38.5, 6.9, 18.9, 3, 5],
    [1, 38.0, 8.5, 19.2, 9, 17],
    [1, 34.7, 10.3, 19.8, 1, 9],
    [1, 45.9, 11.1, 17.5, 11, 23],
    [1, 42.4, 10.0, 19.9, 6, 14],
    [1, 46.0, 10.2, 20.5, 3, 12],
    [2, 77.7, 13.2, 39.3, 3, 17],
    [2, 69.8, 11.1, 31.4, 12, 23],
    [2, 78.2, 19.4, 33.2, 4, 9],
    [2, 55.5, 7.8, 29.6, 1, 25],
    [2, 74.3, 16.0, 34.2, 14, 17],
    [2, 78.3, 12.3, 42.6, 23, 23],
    [2, 74.0, 18.1, 49.0, 8, 9],
    [2, 91.4, 20.1, 60.4, 2, 10],
    [3, 85.0, 17.8, 56.1, 14, 14],
    [3, 79.8, 9.8, 44.8, 9, 10],
    [3, 72.0, 10.2, 37.3, 7, 9],
    [3, 95.3, 11.0, 51.5, 15, 23],
    [3, 69.3, 8.5, 39.3, 4, 9],
    [3, 89.8, 11.2, 58.2, 24, 25],
]

df_realty = pd.DataFrame(realty, columns=columns)

preference_index = 12
preference_vector = df_realty.loc[preference_index].values

distances = []

for i in range(len(df_realty)):
    distances.append(distance.euclidean(preference_vector, df_realty.loc[i]))

# argsort() возвращает индексы в порядке увеличения значений в массиве
best_index = np.array(distances).argsort()[1]

print("Индекс наиболее похожей квартиры:", best_index)