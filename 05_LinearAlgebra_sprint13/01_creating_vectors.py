# Любые числовые данные можно представить в виде вектора.
# В Python наборы данных обычно представлены списками. В математике
# упорядоченный набор числовых данных — это вектор,
# или арифметический вектор (от лат. vector — «несущий»).
# К векторам применимы те же операции, что и к числам: сложение,
# вычитание и умножение. И в отличие от действий со списками,
# операции с векторами в Python производятся в сотни раз быстрее.
# Чтобы работать с векторами, обратимся к возможностям библиотеки
# NumPy (от англ. Numeric Python — «числовой Python»).
# Bекторы также называют массивами.

# Создадим список из двух чисел:

numbers1 = [2, 3] # list
# transforming a list to a vector
import numpy as np
vector1 = np.array(numbers1)
print(vector1)

# Создадим другой вектор без промежуточной переменной:
vector2 = np.array([6, 2])
print(vector2)

# Преобразуем этот вектор в список:
numbers2 = list(vector2)
print(numbers2)

# Столбец структуры DataFrame в pandas преобразуется в вектор NumPy
# атрибутом values (англ. «значения»):
import pandas as pd
data = pd.DataFrame([1, 7, 3])
print(data[0].values)
print(data)

# Функцией len() определим размер вектора, то есть количество элементов в нём:
print(len(vector2))

###### TASK 1 ######

# Рассмотрим пример. В интернет-магазин одежды «НосиВипчик» приходят
# с двух сайтов-агрегаторов. Первый рекламирует вещи масс-маркета
# (англ. mass market — «массовый рынок»), второй — люксовую одежду.
# Клиенты «НосиВипчик» должны оценить по шкале от 0 до 100, насколько
# они довольны стоимостью и качеством продукции. В таблице собраны
# оценки всех покупателей. Высокая оценка стоимости означает,
# что цена клиентам понравилась, то есть вещи стоят дёшево.
# А высокая оценка качества — качество высокое.
reviews_values = [
    [68, 13], [80, 14], [92, 37],
    [34, 62], [87, 17], [29, 88],
    [56, 32], [34, 67], [62, 86],
    [23, 45], [73, 71], [50, 50]
]

df_reviews = pd.DataFrame(reviews_values, columns=['Price', 'Quality'])
print(df_reviews)